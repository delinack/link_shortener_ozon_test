// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/shorter.proto

package shorter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShorterServiceClient is the client API for ShorterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShorterServiceClient interface {
	GetLink(ctx context.Context, in *GetLinkRequest, opts ...grpc.CallOption) (*GetLinkResponse, error)
	CreateLink(ctx context.Context, in *CreateLinkRequest, opts ...grpc.CallOption) (*CreateLinkResponse, error)
}

type shorterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShorterServiceClient(cc grpc.ClientConnInterface) ShorterServiceClient {
	return &shorterServiceClient{cc}
}

func (c *shorterServiceClient) GetLink(ctx context.Context, in *GetLinkRequest, opts ...grpc.CallOption) (*GetLinkResponse, error) {
	out := new(GetLinkResponse)
	err := c.cc.Invoke(ctx, "/link_shorter.ShorterService/GetLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shorterServiceClient) CreateLink(ctx context.Context, in *CreateLinkRequest, opts ...grpc.CallOption) (*CreateLinkResponse, error) {
	out := new(CreateLinkResponse)
	err := c.cc.Invoke(ctx, "/link_shorter.ShorterService/CreateLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShorterServiceServer is the server API for ShorterService service.
// All implementations must embed UnimplementedShorterServiceServer
// for forward compatibility
type ShorterServiceServer interface {
	GetLink(context.Context, *GetLinkRequest) (*GetLinkResponse, error)
	CreateLink(context.Context, *CreateLinkRequest) (*CreateLinkResponse, error)
	mustEmbedUnimplementedShorterServiceServer()
}

// UnimplementedShorterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShorterServiceServer struct {
}

func (UnimplementedShorterServiceServer) GetLink(context.Context, *GetLinkRequest) (*GetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLink not implemented")
}
func (UnimplementedShorterServiceServer) CreateLink(context.Context, *CreateLinkRequest) (*CreateLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLink not implemented")
}
func (UnimplementedShorterServiceServer) mustEmbedUnimplementedShorterServiceServer() {}

// UnsafeShorterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShorterServiceServer will
// result in compilation errors.
type UnsafeShorterServiceServer interface {
	mustEmbedUnimplementedShorterServiceServer()
}

func RegisterShorterServiceServer(s grpc.ServiceRegistrar, srv ShorterServiceServer) {
	s.RegisterService(&ShorterService_ServiceDesc, srv)
}

func _ShorterService_GetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShorterServiceServer).GetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/link_shorter.ShorterService/GetLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShorterServiceServer).GetLink(ctx, req.(*GetLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShorterService_CreateLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShorterServiceServer).CreateLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/link_shorter.ShorterService/CreateLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShorterServiceServer).CreateLink(ctx, req.(*CreateLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShorterService_ServiceDesc is the grpc.ServiceDesc for ShorterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShorterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "link_shorter.ShorterService",
	HandlerType: (*ShorterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLink",
			Handler:    _ShorterService_GetLink_Handler,
		},
		{
			MethodName: "CreateLink",
			Handler:    _ShorterService_CreateLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/shorter.proto",
}
